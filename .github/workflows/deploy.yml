name: CI/CD Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    # Define environment variables specific to the test job
    env:
      ENVIRONMENT: "TESTING"

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Set up Python 3.11.0
      uses: actions/setup-python@v2
      with:
        python-version: 3.11.0

    - name: Check out code
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run migrations
      run: alembic upgrade head

    - name: Test
      run: make test


  deploy-lambda:
    name: Deploy to Amazon ECR and Update Lambda
    runs-on: ubuntu-latest
    needs: test  # Ensure this runs only if 'test' succeeds
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
  
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
  
      - name: Build Docker image
        run: docker build -t ${{ secrets.IMAGE_NAME }}:${{ secrets.TAG_LAMBDA }} -f Dockerfile.lambda .
  
      - name: Tag Docker image
        run: docker tag ${{ secrets.IMAGE_NAME }}:${{ secrets.TAG_LAMBDA }} ${{ secrets.ECR_REPOSITORY_URI }}:${{ secrets.TAG_LAMBDA }}
  
      - name: Push Docker image to Amazon ECR
        run: docker push ${{ secrets.ECR_REPOSITORY_URI }}:${{ secrets.TAG_LAMBDA }}
  
      # Update Lambda function to use the new Docker image
      - name: Update Lambda function
        run: |
          aws lambda update-function-code --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} --image-uri ${{ secrets.ECR_REPOSITORY_URI }}:${{ secrets.TAG_LAMBDA }}

  deploy-ecs:
    name: Deploy to Amazon ECR and Update ECS
    runs-on: ubuntu-latest
    needs: test  # Ensure this runs only if 'test' succeeds
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: docker build -t ${{ secrets.IMAGE_NAME }}:${{ secrets.TAG_VPS }} -f Dockerfile.vps .
  
      - name: Tag Docker image
        run: docker tag ${{ secrets.IMAGE_NAME }}:${{ secrets.TAG_VPS }} ${{ secrets.ECR_REPOSITORY_URI }}:${{ secrets.TAG_VPS }}
  
      - name: Push Docker image to Amazon ECR
        run: docker push ${{ secrets.ECR_REPOSITORY_URI }}:${{ secrets.TAG_VPS }}


      - name: Build, tag, and push Docker image to Amazon ECR
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:${{ github.sha }} .
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:${{ github.sha }}

      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_NAME }} --force-new-deployment
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}